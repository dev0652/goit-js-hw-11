// Transition effect for one property with customizable site-global defaults

@mixin transition(
  $property: all,
  $duration: $transition-duration,
  $function: $transition-timing-function,
  $delay: 0s
) {
  transition-property: $property;
  transition-duration: $duration;
  transition-timing-function: $function;
  transition-delay: $delay;
}

// Transition effect for multiple properties with non-customizable site-global values

@mixin transition-multiple($property...) {
  transition-property: $property;
  transition-duration: $transition-duration;
  transition-timing-function: $transition-timing-function;
}

// Centering of a positioned element

@mixin positioning-centered(
  $top: 0,
  $left: 0,
  $shift-x: -50%,
  $shift-y: $shift-x
) {
  top: $top;
  left: $left;
  transform: translateX($shift-x) translateY($shift-y);
}

// Centering of elements in a flex container

@mixin flex-align($align-items: center, $justify-content: center) {
  display: flex;
  align-items: $align-items;
  justify-content: $justify-content;
}

// Flex element's flex-basis calculation

@mixin flex-basis($items-per-row, $spacing: $regular-gap) {
  // Number of gaps = items per row - 1;

  flex-basis: calc((100% - $spacing * ($items-per-row - 1)) / $items-per-row);
}

// Flex element's flex-basis formula for all 3 screen widths, you only need to provide the number of items per row for each

@mixin flex-basis-mob-tab-desk(
  $items-per-row-mobile: 2,
  $items-per-row-tablet: 3,
  $items-per-row-desktop: 4
) {
  @media screen and (max-width: ($tablet - 1px)) {
    @include flex-basis($items-per-row-mobile);
  }

  @media screen and (max-width: ($mobile)) {
    @include flex-basis(1);
  }

  @media screen and (min-width: $tablet) {
    @include flex-basis($items-per-row-tablet);
  }

  @media screen and (min-width: 1000px) {
    @include flex-basis($items-per-row-desktop);
  }

  @media screen and (min-width: 1400px) {
    @include flex-basis(5);
  }

  @media screen and (min-width: 1600px) {
    @include flex-basis(6);
  }
}
